# -*- coding: utf-8 -*-
"""MovieRecommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFn6Im9_XnobBUqZr8b4cHwP_pdfBQaR

Importing the Dependencies
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
import difflib
import math
import cosine_similarity

"""Difflib helps to find the closest match to the movie the user will enter"""

# https://pypi.python.org/pypi/libarchive
!apt-get -qq install -y libarchive-dev && pip install -U libarchive
import libarchive
!pip install matplotlib-venn
import pydot

from sklearn.feature_extraction.text import TfidfVectorizer

"""Textual data to numerical using TfidfVectorizer

Data Collection and Pre-Processing
"""

from google.colab import files
upload = files.upload()

movies_data = pd.read_csv('movies.csv')

movies_data.head()

for col in movies_data.columns:
  print(col)

movies_data.shape

"""(Rows, Columns)"""

selected_features = ['keywords', 'tagline', 'director','cast','genres']
print(selected_features)

"""Replacing null values with null string because textual data consists null values."""

for feat in selected_features:
  movies_data[feat] = movies_data[feat].fillna('')

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['cast']+' '+movies_data['director']+' '+movies_data['tagline']

print(combined_features)

"""Convert text data to feature vectors for cosine similarity. As Cosine similarity works effeciently on numerical values"""

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)
print(feature_vectors)

"""Getting similarity scores using cosine similarity"""

similarity = cosine_similarity(feature_vectors)
print(similarity)

"""Comparing Avatar with all other movies and giving the similarity score."""

print(similarity.shape)

"""Getting he movie name from the user"""

movie_name = input("Enter the movie name: ")

"""Creating a list with all movies given in dataset"""

list_of_all_titles = movies_data['title'].tolist()
print(list_of_all_titles)

"""Finding the close match for the movie name by the user"""

find_match = difflib.get_close_matches(movie_name, list_of_all_titles)
print(find_match)

close_match = find_match[0]
print(close_match)

"""Find the index of the movie"""

movie_index = movies_data[movies_data.title == close_match]['index'].values[0]
print(movie_index)

similarity_score = list(enumerate(similarity[movie_index]))
similarity_score

len(similarity_score)

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
sorted_similar_movies

"""Print the name of similar movies"""

print("Movies suggested for you: ")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if (i<30):
    print(i, '.', title_from_index)
    i+=1

movie_name = input("Enter the movie name: ")

list_of_all_titles = movies_data['title'].tolist()

find_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_match[0]

movie_index = movies_data[movies_data.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[movie_index]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True) 

print("Movies suggested for you: ")
i = 1
for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = movies_data[movies_data.index == index]['title'].values[0]
  if (i<30):
    print(i, '.', title_from_index)
    i+=1